"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[3129],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},p=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=a,h=d["".concat(s,".").concat(p)]||d[p]||m[p]||r;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}p.displayName="MDXCreateElement"},22387:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var i=n(83117),a=(n(67294),n(3905));const r={},o="Accessibility",l={unversionedId:"guides/accessibility",id:"guides/accessibility",title:"Accessibility",description:"In this section, we will explore how Reanimated provides support for enhanced accessibility in animations, particularly through its reduced motion functionality. This feature ensures a smoother experience for users who may have motion sensitivities or prefer less movement.",source:"@site/docs/guides/accessibility.mdx",sourceDirName:"guides",slug:"/guides/accessibility",permalink:"/react-native-reanimated/docs/guides/accessibility",draft:!1,editUrl:"https://github.com/software-mansion/react-native-reanimated/edit/main/docs/guides/accessibility.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Guides",permalink:"/react-native-reanimated/docs/category/guides"},next:{title:"Debugging worklets",permalink:"/react-native-reanimated/docs/guides/debugging"}},s={},u=[{value:"Reduced motion in animations",id:"reduced-motion-in-animations",level:2},{value:"Reduced motion in Layout Animations",id:"reduced-motion-in-layout-animations",level:2},{value:"<code>useReducedMotion</code>",id:"usereducedmotion",level:2}],c={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"accessibility"},"Accessibility"),(0,a.kt)("p",null,"In this section, we will explore how Reanimated provides support for enhanced accessibility in animations, particularly through its reduced motion functionality. This feature ensures a smoother experience for users who may have motion sensitivities or prefer less movement."),(0,a.kt)("p",null,"The reduced motion configuration can be used to define how animations should respond to the system's reduced motion setting.\nFor a given animation, the value can be set to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ReduceMotion.System")," - This value adjusts the animation behavior based on whether the reduced motion accessibility setting is activated on the device. When enabled, the animation is disabled; otherwise, it remains active."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ReduceMotion.Always")," - With this setting, the animation is consistently disabled, regardless of the device's accessibility configuration."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ReduceMotion.Never")," - This option ensures that the animation remains enabled at all times.")),(0,a.kt)("p",null,"By default all animations are configured with ",(0,a.kt)("inlineCode",{parentName:"p"},"ReduceMotion.System"),"."),(0,a.kt)("h2",{id:"reduced-motion-in-animations"},"Reduced motion in animations"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv1.value = withTiming(0, { reduceMotion: ReduceMotion.System });\n  sv2.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.System\n  );\n  // ...\n}\n")),(0,a.kt)("p",null,"When reduced motion is enabled:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"withSpring")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"withTiming")," return the ",(0,a.kt)("inlineCode",{parentName:"li"},"toValue")," immediately"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"withDecay")," returns the current value immediately, taking into account the clamp parameter"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"withDelay")," initiates the next animation immediately"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"withRepeat"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"when the ",(0,a.kt)("inlineCode",{parentName:"li"},"numberOfReps")," is infinite or even and the animation is reversed, then the repeated animation does not start"),(0,a.kt)("li",{parentName:"ul"},"otherwise, the repeated animation runs once"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"withSequence")," exclusively starts animations that have reduced motion disabled")),(0,a.kt)("p",null,"Higher-order animations pass the configuration to their children, only if the children have not been configured by the user."),(0,a.kt)("p",null,"For example, this animation will instantaneously reach the ",(0,a.kt)("inlineCode",{parentName:"p"},"toValue"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.Always\n  );\n  // ...\n}\n")),(0,a.kt)("p",null,"This animation will execute as usual even if reduced motion is enabled on the device:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration }),\n    ReduceMotion.Never\n  );\n  // ...\n}\n")),(0,a.kt)("p",null,"And here ",(0,a.kt)("inlineCode",{parentName:"p"},"withTiming")," will be executed as usual and with no delay:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { withDelay, withTiming } from 'react-native-reanimated';\n\nfunction App() {\n  sv.value = withDelay(\n    1000,\n    withTiming(toValue, { duration, reduceMotion: ReduceMotion.Never }),\n    ReduceMotion.Always\n  );\n  // ...\n}\n")),(0,a.kt)("h2",{id:"reduced-motion-in-layout-animations"},"Reduced motion in Layout Animations"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { BounceIn } from 'react-native-reanimated';\n\nfunction App() {\n  const entering = BounceIn.reduceMotion(ReduceMotion.System);\n  // ...\n}\n")),(0,a.kt)("p",null,"When reduced motion is enabled:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"entering, keyframe, and layout animations instantaneously reach their endpoints."),(0,a.kt)("li",{parentName:"ul"},"exiting animations and shared transitions are omitted.")),(0,a.kt)("h2",{id:"usereducedmotion"},(0,a.kt)("inlineCode",{parentName:"h2"},"useReducedMotion")),(0,a.kt)("p",null,"This hook returns a boolean indicating whether the reduced motion setting was enabled when the app started.\nIt can be used in conjunction with other libraries or to conditionally display animations that are less intrusive."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { BounceIn } from 'react-native-reanimated';\n\nfunction App() {\n  const reduceMotion = useReducedMotion();\n  const entering = reduceMotion\n    ? FadeIn.reduceMotion(ReduceMotion.Never)\n    : BounceIn;\n  // ...\n}\n")))}m.isMDXComponent=!0}}]);